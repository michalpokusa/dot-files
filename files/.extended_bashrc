# Sudo preservs environment variables
alias sudo='sudo -E'

# Fixes for default commands behavior
alias mkdir='mkdir --parents'

# Create directory and change to it immediately
mkcd() {
  mkdir --parents "$@" && cd "$_";
}

# Aliases for creating links
hard-link() {
    mkdir --parents $(dirname $2)
    ln --verbose $1 $2
}

soft-link() {
    mkdir --parents $(dirname $2)
    ln --symbolic --verbose --relative $1 $2
}

# Change directory aliases
alias home='cd ~'
alias projects='cd ~/projects'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Interactive cd command
function icd() {

    # Set the trap for Ctrl+C to return from the function
    trap 'return' SIGINT

    current_index=1
    search_term=""

    while true; do
        clear

        # List folders and files in current directory
        files_and_dirs=$(ls --almost-all --classify | grep --extended-regexp --ignore-case "$search_term")
        files_length=$(echo "$files_and_dirs" | wc --lines)

        # Clamp current index
        if [ $current_index -lt 1 ]; then
            current_index=$files_length
        fi
        if [ $current_index -gt $files_length ]; then
            current_index=1
        fi

        # Print current directory
        echo -e "$(pwd)\n"

        # If search term not empty, print it
        if [ -n "$search_term" ]; then
            echo "Search: $search_term"
            echo
        fi


        # If no files or directories found, print message
        # if [ $files_length -eq 0 ]; then
        if [ "$files_and_dirs" = "" ]; then
            echo "No files or directories found"

        # List files and directories
        else
            entry_index=1
            selected_option=""
            for entry in $files_and_dirs; do
                # Selected entry
                if [ $entry_index -eq $current_index ]; then
                    echo -e "\033[1m\033[4m$entry\033[0m"
                    selected_option=$entry
                # Other entries
                else
                    echo -e "$entry"
                fi
                entry_index=$((entry_index + 1))
            done
        fi

        read -s -n1 action
        case "$action" in

            # Enter
            ('')
                # If the selected option is a file, open it
                if [ -f "$selected_option" ]; then
                    vim "$selected_option"
                fi
            ;;

            # Arrow keys
            ($'\033')
                read -t.001 -n2 arrow_key_code
                case "$arrow_key_code" in

                    # Up arrow key
                    ('[A')
                        current_index=$((current_index - 1))
                    ;;

                    # Down arrow key
                    ('[B')
                        current_index=$((current_index + 1))
                    ;;

                    # Right arrow key
                    ('[C')
                        # If the selected option is a directory, cd into it
                        if [ -d "$selected_option" ]; then
                            cd "$selected_option"
                            search_term=""
                        fi
                    ;;

                    # Left arrow key
                    ('[D')
                        cd ..
                        search_term=""
                    ;;
                esac
            ;;

            # Backspace
            ($'\177')
                echo "Backspace"
                search_term="${search_term%?}"
            ;;

            (*)
                search_term="$search_term$action"
            ;;
        esac
    done
}


# Docker aliases
alias dp='docker ps --all'
alias dr='docker run --rm -it'
alias de='docker exec -it'
alias dl='docker logs --timestamps --since 1h --follow'
alias dcu='docker compose --file docker-compose.yml up'
alias dcud='docker compose --file docker-compose.yml up -d'
alias dcd='docker compose --file docker-compose.yml down'
alias dcr='docker compose --file docker-compose.yml restart'
alias dcp='docker compose --file docker-compose.yml pull'
alias dcl='docker compose --file docker-compose.yml logs'
alias dsp='docker system prune --all --force --volumes'

# Convinience aliases
alias public-ip='curl https://ifconfig.me/ip; echo'
alias ports='netstat -tulanp'
alias total-size='du --human-readable --summarize --total'

# Allow executing scripts from home and current directory
export PATH=$PATH:~:.

# Set default editor
export EDITOR=vim

vim() {
    # Get last argument and save it as file path
    for ARG in $@; do :; done
    FILE_PATH=$ARG

    ABSOLUTE_FILE_PARENT_DIRECTORY=$(realpath $(dirname $FILE_PATH))

    # If file name was provided, try creating its parent directory if it doesn't exist
    if [[ -n "$FILE_PATH" && ! -d "$ABSOLUTE_FILE_PARENT_DIRECTORY" ]]; then

        UNDERLINE="\033[4m"
        RESET="\033[0m"

        # Ask whether to create parent directory
        read -n1 -p "$(echo -e "Create parent directory $UNDERLINE$ABSOLUTE_FILE_PARENT_DIRECTORY$RESET? [y/N] ")" SHOULD_CREATE_PARENT_DIRECTORY
        if [[ "$SHOULD_CREATE_PARENT_DIRECTORY" =~ y|Y ]]; then
            mkdir --parents $ABSOLUTE_FILE_PARENT_DIRECTORY
        fi
        echo
    fi

    # Open file in vim
    command vim $@
}

# Preprent with date and time
export PS1="[\[\033[38;5;239m\]\$(date +%Y-%m-%d\\ %H:%M:%S)\[\033[0m\]] $PS1"

recreate-pip-venv() {
    # Remove existing .venv if exists
    if [[ -d ".venv" ]]; then
    printf "Removing existing .venv\n"
        rm -rf .venv
    fi

    # Create new .venv
    printf "Creating new .venv\n"
    python3 -m venv .venv
    source .venv/bin/activate

    # Install packages from requirements.txt
    if [[ -f "requirements.txt" ]]; then
        printf "Installing packages from requirements.txt\n"
        pip install -r requirements.txt
    fi
}


test-terminal-8-bit-colors() {
    # Read text to use as a placeholder
    read -p "Enter text to use as a placeholder: " placeholderText

    # Foreground colors
    for colorIndex in {0..255} ; do
        printf "\x1b[0m${colorIndex}: "

        # Print placeholder using foreground color
        printf "\x1b[38;5;${colorIndex}m${placeholderText}\x1b[0m"

        # Print a block of background color
        printf "\t\t\x1b[48;5;${colorIndex}m                  \x1b[0m\n"
    done
}

update-dot-files() {
    curl --silent https://raw.githubusercontent.com/michalpokusa/dot-files/main/update-or-setup-dot-files.sh | bash
}
